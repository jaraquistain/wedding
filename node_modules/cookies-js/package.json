{
  "name": "cookies-js",
  "version": "0.4.0",
  "author": {
    "name": "Scott Hamper"
  },
  "description": "Client-Side Cookie Manipulation API",
  "homepage": "http://github.com/ScottHamper/Cookies",
  "license": "MIT",
  "keywords": [
    "cookies",
    "client",
    "browser"
  ],
  "repository": {
    "type": "git",
    "url": "git://github.com/ScottHamper/Cookies.git"
  },
  "main": "./src/cookies.js",
  "readme": "# Cookies.js\n\nCookies.js is a small client-side javascript library that makes managing cookies easy.\n\n## Features\n- Caches cookie values, making sequential reads faster.\n- Supports AMD / CommonJS loaders.\n- Cross browser.\n- Lightweight.\n- [RFC6265](http://www.rfc-editor.org/rfc/rfc6265.txt) Compliant.\n\n## Browser Compatibility\nThe following browsers have passed all of the Cookies.js unit tests:\n- Chrome\n- Firefox 3+\n- Safari 4+\n- Opera 10+\n- Internet Explorer 6+\n\n## Getting the Library\n### Direct downloads\n- [Minified](https://raw.github.com/ScottHamper/Cookies/master/dist/cookies.min.js) (~1 KB gzipped)\n- [Unminified](https://raw.github.com/ScottHamper/Cookies/master/src/cookies.js) (~1.7 KB gzipped)\n\n### Node Package Manager\n`npm install cookies-js`\n\n### Bower\n`bower install cookies-js`\n\n## A Note About Encoding\n[RFC6265](http://www.rfc-editor.org/rfc/rfc6265.txt) defines a strict set of allowed characters for\ncookie keys and values. In order to effectively allow any character to be used in a key or value,\nCookies.js will URI encode disallowed characters in their UTF-8 representation. As such, Cookies.js\nalso expects cookie keys and values to already be URI encoded in a UTF-8 representation when it\naccesses cookies. Keep this in mind when working with cookies on the server side.\n\n### .NET Users\nDo not use [HttpUtility.UrlEncode](http://msdn.microsoft.com/en-us/library/4fkewx0t.aspx) and\n[HttpUtility.UrlDecode](http://msdn.microsoft.com/en-us/library/adwtk1fy.aspx) on cookie keys or\nvalues. `HttpUtility.UrlEncode` will improperly escape space characters to `'+'` and lower case every\nescape sequence. `HttpUtility.UrlDecode` will improperly unescape every `'+'` to a space character.\nInstead, use\n[System.Uri.EscapeDataString](http://msdn.microsoft.com/en-us/library/system.uri.escapedatastring.aspx)\nand [System.Uri.UnescapeDataString](http://msdn.microsoft.com/en-us/library/system.uri.unescapedatastring.aspx).\n\n\n# API Reference\n\n## Methods\n\n### Cookies.set(key, value [, options])\n*Alias: Cookies(key, value [, options])*\n\nSets a cookie in the document. If the cookie does not already exist, it will be created.\n\n#### Arguments:\n*key*: A string value of the cookie key to set  \n*value*: A string value of the cookie value to set  \n*options*: An object containing additional parameters about the cookie (discussed below)\n\n#### Returns:\nThe `Cookies` object is returned to support chaining.\n\n#### The 'options' Object:\n*path*: A string value of the path of the cookie  \n*domain*: A string value of the domain of the cookie  \n*expires*: A number (of seconds), a date parsable string, or a `Date` object of when the cookie will expire  \n*secure*: A boolean value of whether or not the cookie should only be available over SSL\n\nIf any property is left undefined, the browser's default value will be used instead. A default value\nfor any property may be set in the `Cookies.defaults` object.\n\n**Why use 'expires' instead of 'max-age' (or why not both)?**  \nInternet Explorer 6 - 8 do not support 'max-age', so Cookies.js always uses 'expires' internally.\nHowever, Cookies.js simplifies things by allowing the `options.expires` property to be used in the\nsame way as 'max-age' (by setting `options.expires` to the number of seconds the cookie should exist for).\n\n#### Example usage:\n```javascript\n// Setting a cookie value\nCookies.set('key', 'value');\n\n// Chaining sets together\nCookies.set('key', 'value').set('hello', 'world');\n\n// Setting cookies with additional options\nCookies.set('key', 'value', { domain: 'www.example.com', secure: true });\n\n// Setting cookies with expiration values\nCookies.set('key', 'value', { expires: 600 }); // Expires in 10 minutes\nCookies.set('key', 'value', { expires: '01/01/2012' });\nCookies.set('key', 'value', { expires: new Date(2012, 0, 1) });\n\n// Using the alias\nCookies('key', 'value', { secure: true });\n```\n\n### Cookies.get(key)\n*Alias: Cookies(key)*\n\nRetrieves the cookie value of the most locally scoped cookie with the specified key.\n\n#### Arguments:\n*key*: A string value of a cookie key\n\n#### Returns:\nThe string value of the cookie.\n\n#### Example Usage:\n```javascript\n// First set a cookie\nCookies.set('key', 'value');\n\n// Get the cookie value\nCookies.get('key'); // \"value\"\n\n// Using the alias\nCookies('key'); // \"value\"\n```\n    \n### Cookies.expire(key [, options])\n*Alias: Cookies(key, `undefined` [, options])*\n\nExpires a cookie, removing it from the document.\n\n#### Arguments:\n*key*: A string value of the cookie key to expire  \n*options*: An object containing additional parameters about the cookie (discussed below)\n\n#### Returns:\nThe `Cookies` object is returned to support chaining.\n\n#### The 'options' Object:\n*path*: A string value of the path of the cookie  \n*domain*: A string value of the domain of the cookie\n\nIf any property is left `undefined`, the browser's default value will be used instead. A default value\nfor any property may be set in the `Cookies.defaults` object.\n\n#### Example Usage:\n```javascript\n// First set a cookie and get its value\nCookies.set('key', 'value').get('key'); // \"value\"\n\n// Expire the cookie and try to get its value\nCookies.expire('key').get('key'); // undefined\n\n// Using the alias instead\nCookies('key', undefined);\n```\n    \n\n## Properties\n\n### Cookies.enabled\nA boolean value of whether or not the browser has cookies enabled.\n\n#### Example Usage:\n```javascript\nif (Cookies.enabled) {\n    Cookies.set('key', 'value');\n}\n```\n\n### Cookies.defaults\nAn object representing default options to be used when setting and expiring cookie values.\n`Cookies.defaults` supports the following properties:\n\n*path*: A string value of the path of the cookie  \n*domain*: A string value of the domain of the cookie  \n*expires*: A number (of seconds), a date parsable string, or a `Date` object of when the cookie will expire  \n*secure*: A boolean value of whether or not the cookie should only be available over SSL\n\nBy default, only `Cookies.defaults.path` is set to `'/'`, all other properties are `undefined`.\nIf any property is left undefined, the browser's default value will be used instead.\n\n#### Example Usage:\n```javascript\nCookies.defaults = {\n    path: '/',\n    secure: true\n};\n\nCookies.set('key', 'value'); // Will be secure and have a path of '/'\nCookies.expire('key'); // Will expire the cookie with a path of '/'\n```",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/ScottHamper/Cookies/issues"
  },
  "_id": "cookies-js@0.4.0",
  "dist": {
    "shasum": "50ac23d094117cb6faff9e0f483ce7cc4ae84d5d"
  },
  "_from": "cookies-js@",
  "_resolved": "https://registry.npmjs.org/cookies-js/-/cookies-js-0.4.0.tgz"
}
